import time
import telebot
from BotToken import token
from workWithDB import Sqlighter
from telebot import types
from threading import Thread
from experiments import sendler_notification_holiday, sendler_notification_peregovorka, sendler_notification_salary
from workWithDB import get_data




def service_checker(message):
    if message.text == "1":
        reg = bot.send_message(message.chat.id,
                               "–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —É—Å–ª—É–≥—É '–ü—Ä–æ–≤–µ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –≤ –¥–æ–º' \n–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–¥—Ä–µ—Å –∏ –¥–∞—Ç—É\n"
                               "–ü—Ä–∏–º–µ—Ä:\n"
                               "89992576336, –£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞ –¥–æ–º 4 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 25, 01.06.2022")
        bot.register_next_step_handler(reg, reg_serv)
    elif message.text == "2":
        reg = bot.send_message(message.chat.id,
                               "–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —É—Å–ª—É–≥—É '–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ –ª–∞–º–ø—ã –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞' \n–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–¥—Ä–µ—Å –∏ –¥–∞—Ç—É\n"
                               "–ü—Ä–∏–º–µ—Ä:\n"
                               "89992576336, –£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞ –¥–æ–º 4 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 25, 01.06.2022")
        bot.register_next_step_handler(reg, reg_serv)
    elif message.text == "3":
        reg = bot.send_message(message.chat.id,
                               "–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —É—Å–ª—É–≥—É '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤' \n–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–¥—Ä–µ—Å –∏ –¥–∞—Ç—É\n"
                               "–ü—Ä–∏–º–µ—Ä:\n"
                               "89992576336, –£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞ –¥–æ–º 4 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 25, 01.06.2022")
        bot.register_next_step_handler(reg, reg_serv)
    elif message.text == "4":
        reg = bot.send_message(message.chat.id,
                               "–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —É—Å–ª—É–≥—É '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –¥–æ–º–∞' \n–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–¥—Ä–µ—Å –∏ –¥–∞—Ç—É\n"
                               "–ü—Ä–∏–º–µ—Ä:\n"
                               "89992576336, –£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞ –¥–æ–º 4 –∫–≤–∞—Ä—Ç–∏—Ä–∞ 25, 01.06.2022")
        bot.register_next_step_handler(reg, reg_serv)


def reg_serv(message):
    text = message.text
    text = text.split(", ")

    if len(text) == 3:
        Sqlighter.save_order("–ü—Ä–æ–≤–µ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –≤ –¥–æ–º", text[0], text[1], text[2])
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        sticker = open("AnimatedSticker.tgs", "rb")
        bot.send_sticker(message.chat.id, sticker)

    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è" or message.text == "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ" or message.text == "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚úçÔ∏è":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑")

    else:
        uncorrect = bot.send_message(message.chat.id, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(uncorrect, reg_serv)


def reg_serv2(message):
    text = message.text
    text = text.split(", ")
    if len(text) == 3:
        Sqlighter.save_order("–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ –ª–∞–º–ø—ã –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞", text[0], text[1], text[2])
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        sticker = open("AnimatedSticker.tgs", "rb")
        bot.send_sticker(message.chat.id, sticker)

    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è" or message.text == "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ" or message.text == "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚úçÔ∏è":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑")

    else:
        uncorrect = bot.send_message(message.chat.id, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(uncorrect, reg_serv2)


def reg_serv3(message):
    text = message.text
    text = text.split(", ")
    if len(text) == 3:
        Sqlighter.save_order("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤", text[0], text[1], text[2])
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        sticker = open("AnimatedSticker.tgs", "rb")
        bot.send_sticker(message.chat.id, sticker)

    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è" or message.text == "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ" or message.text == "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚úçÔ∏è":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑")

    else:
        uncorrect = bot.send_message(message.chat.id, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(uncorrect, reg_serv3)


def reg_serv4(message):
    text = message.text
    text = text.split(", ")
    if len(text) == 3:
        Sqlighter.save_order("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –¥–æ–º–∞", text[0], text[1], text[2])
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        sticker = open("AnimatedSticker.tgs", "rb")
        bot.send_sticker(message.chat.id, sticker)

    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è" or message.text == "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ" or message.text == "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚úçÔ∏è":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑")

    else:
        uncorrect = bot.send_message(message.chat.id, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        bot.register_next_step_handler(uncorrect, reg_serv4)


def review(message):
    if message.text != "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è" and message.text != "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ" and message.text != "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è":
        Sqlighter.save_review(message.text)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! üòÅ")

    else:
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")


bot = telebot.TeleBot(token)


@bot.message_handler(commands=["start"], chat_types=["private"])
def sendler(message):
    if Sqlighter.get_info_workers(message.from_user.id) is None:

        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        get_list = types.KeyboardButton("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ")
        write_review = types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è")
        support = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è")
        kb.add(get_list, write_review, support)

        bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}, "
                                          f"—è –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ *–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫*"
                         , parse_mode="markdown", reply_markup=kb)


@bot.message_handler(content_types=["text"], chat_types=["private"])
def send_reply(message):
    if message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è":
        sent = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚úçÔ∏è")
        bot.register_next_step_handler(sent, review)

    elif message.text == "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ":
        photo = open("services.png", "rb")
        first = bot.send_photo(message.chat.id, photo, "–ù–∞—à–∏ —É—Å–ª—É–≥–∏")
        bot.register_next_step_handler(first, service_checker)

    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è":
        url_but = types.InlineKeyboardMarkup(row_width=1)
        url_tg = types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/GGAMID")
        url_but.add(url_tg)
        bot.send_message(message.chat.id, "–ü–∏—à–∏—Ç–µ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º ‚§µÔ∏è", reply_markup=url_but)

    elif message.text == "–ø–∞—Ä–æ–ª—å: —ç–ª–µ–∫—Ç—Ä–∏–∫ - –ª—É—á—à–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –º–∏—Ä–µ":

        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        set_peregovorka = types.KeyboardButton("..–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞?..")
        about_salary = types.KeyboardButton("..INFO?..")
        info_but = types.KeyboardButton("‚¨ÖÔ∏èCOME BACK‚¨ÖÔ∏è")
        kb.add(set_peregovorka, info_but, about_salary)
        bot.send_message(message.chat.id, "–û! –ü—Ä–∏–≤–µ—Ç, —Ä–∞–±–æ—Ç–Ω–∏–∫, —Ç—ã –ø–æ–ø–∞–ª –≤ _—Å–µ–∫—Ä–µ—Ç–Ω—É—é_ —Å–µ–∫—Ü–∏—é! ü•∑",parse_mode="markdown", reply_markup=kb)

    # elif message.text == "..–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞?..":
    #     inlineKb = types.InlineKeyboardMarkup(row_width=1)
    #     set_date = types.InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="bron")
    #     when = types.InlineKeyboardButton("", callback_data="bron")

    elif message.text == "..INFO?..":
        bot.send_message(message.chat.id, f"*–í–∞—à–∞ –ó–ü* = {Sqlighter.get_info_workers(message.chat.id)[0]}\n"
                                          f"*–î–∞—Ç–∞ –ó–ü* = {Sqlighter.get_info_workers(message.chat.id)[1]}\n"
                                          f"*–î–∞—Ç–∞ –æ—Ç–ø—É—Å–∫–∞* = {Sqlighter.get_info_workers(message.chat.id)[2]}\n"
                                          f"*–î–∞—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞* = {Sqlighter.get_info_workers(message.chat.id)[3]}", parse_mode="markdown")

    elif message.text == "‚¨ÖÔ∏èCOME BACK‚¨ÖÔ∏è":

        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        get_list = types.KeyboardButton("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ üìÉ")
        write_review = types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è")
        support = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è")
        kb.add(get_list, write_review, support)

        bot.send_message(message.chat.id, f"–ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é", reply_markup=kb)

    else:
        bot.send_message("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :( ")

@bot.message_handler(commands=["start"], chat_types=["group"])
def sendler(message):
    bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,"f"—è –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ *–≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫*"
                                      f" –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –≤ —á–∞—Ç–µ!", parse_mode="markdown",
                     reply_markup=None)


@bot.message_handler(content_types=["text"], chat_types=["group"])
def text_checkker(message):
    text = message.text
    if "–º–∞—Ç" in text.lower():
        bot.send_message(message.chat.id, "–Ω–µ –º–∞—Ç–µ—Ä–∏—Ç–µ—Å—å!")


def sendler_notification(salary, holiday, peregovorka):
    while True:
        for i in salary:
            bot.send_message(i, f"–°–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç–∞! üéâ {Sqlighter.get_info_workers(i)[1]}")
        for i in holiday:
            bot.send_message(i, f"–°–∫–æ—Ä–æ –û—Ç–ø—É—Å–∫! üéâ {Sqlighter.get_info_workers(i)[2]}")
        for i in peregovorka:
            bot.send_message(i, f"–°–∫–æ—Ä–æ –ø–µ—Ä–≥–æ–≤–æ—Ä—ã! üéâ {Sqlighter.get_info_workers(i)[3]}")
        time.sleep(86400)


th2 = Thread(target=sendler_notification,
             args=(sendler_notification_salary(get_data()), sendler_notification_holiday(get_data()), sendler_notification_peregovorka(get_data())))
th2.start()

th = Thread(target=bot.infinity_polling())
th.start()
